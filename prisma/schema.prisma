// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  name          String?
  image         String?
  isAdmin       Boolean      @default(false)
  paymentPlanId String?
  accounts      Account[]
  sessions      Session[]
  site          Site[]
  asset         Asset[]
  paymentPlan   PaymentPlan? @relation(fields: [paymentPlanId], references: [id])
  date_created  DateTime     @default(now())
  date_updated  DateTime     @updatedAt
}

// Site holds all data about the Site (Website that is created and displayed on the internet)
model Site {
  id             String       @id @default(cuid())
  alias          String       @unique
  domain         String?      @unique
  published      Boolean      @default(false)
  userId         String
  componentId    String
  sitePageDataId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  component      Component    @relation(fields: [componentId], references: [id])
  sitePageData   SitePageData @relation(fields: [sitePageDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  page           Page[]
  asset          Asset[]
  date_created   DateTime     @default(now())
  date_updated   DateTime     @updatedAt

  @@index([alias])
}

// Page holds data about the Page that is related to the Site
model Page {
  id             String       @id @default(cuid())
  alias          String
  published      Boolean      @default(false)
  siteId         String
  sitePageDataId String
  site           Site         @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sitePageData   SitePageData @relation(fields: [sitePageDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  asset          Asset[]
  date_created   DateTime     @default(now())
  date_updated   DateTime     @updatedAt
}

// SitePageData holds all the metadata about the Site or Page (title, description, OG tags, image, icon)
model SitePageData {
  id               String         @id @default(cuid())
  title            String?
  description      String?
  image            String?
  icon             String?
  sitePageSchemaId String
  site             Site[]
  page             Page[]
  sitePageSchema   SitePageSchema @relation(fields: [sitePageSchemaId], references: [id], onUpdate: Cascade)
  date_created     DateTime       @default(now())
  date_updated     DateTime       @updatedAt
}

// SitePageSchema holds all data about the Site or Page schemas
model SitePageSchema {
  id            String         @id @default(cuid())
  schema        Json
  styles_schema Json
  sitePageData  SitePageData[]
  date_created  DateTime       @default(now())
  date_updated  DateTime       @updatedAt
}

// Component is a set of components made to create sites
model Component {
  id           String     @id @default(cuid())
  name         String
  alias        String     @unique
  description  String
  schema       Json
  site         Site[]
  template     Template[]
  date_created DateTime   @default(now())
  date_updated DateTime   @updatedAt

  @@index([alias])
}

// Template is a premade template for easy reusability
model Template {
  id            String    @id @default(cuid())
  componentId   String
  schema        Json
  styles_schema Json
  component     Component @relation(fields: [componentId], references: [id])
  date_created  DateTime  @default(now())
  date_updated  DateTime  @updatedAt
}

enum AssetType {
  image
  video
  font
}

model Asset {
  id           String    @id @default(cuid())
  name         String
  url          String
  type         AssetType
  size         Int
  userId       String?
  siteId       String?
  pageId       String?
  user         User?     @relation(fields: [userId], references: [id])
  site         Site?     @relation(fields: [siteId], references: [id])
  page         Page?     @relation(fields: [pageId], references: [id])
  date_created DateTime  @default(now())
  date_updated DateTime  @updatedAt
}

enum PaymentPlanName {
  early
  free
  basic
  pro
}

// Payment plan of the user (subscription or one-time payment)
model PaymentPlan {
  id                     String          @id @default(cuid())
  name                   PaymentPlanName @unique
  price                  Int?
  hasCustomDomain        Boolean         @default(false)
  hasAnalytics           Boolean         @default(false)
  hasCookies             Boolean         @default(false)
  showBuiltWith          Boolean         @default(true)
  numberOfSites          Int?
  numberOfPages          Int?
  maxUploadSize          Int?
  versionHistoryDuration Int?
  user                   User[]
  date_created           DateTime        @default(now())
  date_updated           DateTime        @updatedAt
}

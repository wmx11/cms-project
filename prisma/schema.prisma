// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String       @id @default(cuid())
  email           String?      @unique
  emailVerified   DateTime?    @map("email_verified")
  name            String?
  image           String?
  is_admin        Boolean      @default(false)
  accounts        Account[]
  sessions        Session[]
  site            Site[]
  asset           Asset[]
  payment_plan_id String?
  payment_plan    PaymentPlan? @relation(fields: [payment_plan_id], references: [id])
  date_created    DateTime     @default(now())
  date_updated    DateTime     @updatedAt
}

// Site holds all data about the Site (Website that is created and displayed on the internet)
model Site {
  id                String       @id @default(cuid())
  alias             String       @unique
  domain            String?      @unique
  image             String?
  page              Page[]
  asset             Asset[]
  user_id           String
  user              User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  component_id      String
  component         Component    @relation(fields: [component_id], references: [id])
  site_page_data_id String
  site_page_data    SitePageData @relation(fields: [site_page_data_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  template_id       String?
  template          Template?    @relation(fields: [template_id], references: [id])
  date_created      DateTime     @default(now())
  date_updated      DateTime     @updatedAt

  @@index([alias])
}

// Page holds data about the Page that is related to the Site
model Page {
  id                String       @id @default(cuid())
  alias             String
  asset             Asset[]
  site_id           String
  site              Site         @relation(fields: [site_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  site_page_data_id String
  site_page_data    SitePageData @relation(fields: [site_page_data_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date_created      DateTime     @default(now())
  date_updated      DateTime     @updatedAt
}

// SitePageData holds all the metadata about the Site or Page (title, description, OG tags, image, icon)
model SitePageData {
  id                            String           @id @default(cuid())
  title                         String?
  description                   String?
  image                         String?
  icon                          String?
  site                          Site[]
  page                          Page[]
  published_site_page_schema_id String?          @unique
  published_site_page_schema    SitePageSchema?  @relation("PublishedSitePage", fields: [published_site_page_schema_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  working_site_page_schema_id   String?          @unique
  working_site_page_schema      SitePageSchema?  @relation("WorkingSitePage", fields: [working_site_page_schema_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  site_page_schema              SitePageSchema[]
  date_created                  DateTime         @default(now())
  date_updated                  DateTime         @updatedAt
}

// SitePageSchema holds all data about the Site or Page schemas
// This is the "History" of the Site or Page
model SitePageSchema {
  id                       String        @id @default(cuid())
  is_published             Boolean       @default(false)
  /// [_Schema]
  schema                   Json          @default("[]")
  /// [_StylesSchema]
  styles_schema            Json          @default("[]")
  published_site_page_data SitePageData? @relation("PublishedSitePage")
  working_site_page_data   SitePageData? @relation("WorkingSitePage")
  site_page_data_id        String?
  site_page_data           SitePageData? @relation(fields: [site_page_data_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date_created             DateTime      @default(now())
  date_updated             DateTime      @updatedAt
}

// Component is a set of components made to create sites
model Component {
  id           String     @id @default(cuid())
  name         String?
  alias        String     @unique
  description  String?
  image        String?
  /// [_Schema]
  schema       Json       @default("[]")
  site         Site[]
  template     Template[]
  date_created DateTime   @default(now())
  date_updated DateTime   @updatedAt

  @@index([alias])
}

// Template is a premade template for easy reusability
model Template {
  id            String    @id @default(cuid())
  name          String
  description   String?
  image         String?
  is_published  Boolean   @default(false)
  /// [_Schema]
  schema        Json      @default("[]")
  /// [_StylesSchema]
  styles_schema Json      @default("[]")
  component_id  String
  component     Component @relation(fields: [component_id], references: [id])
  site          Site[]
  date_created  DateTime  @default(now())
  date_updated  DateTime  @updatedAt
}

enum AssetType {
  meta_image
  video
  image
  icon
  font
}

model Asset {
  id           String    @id @default(cuid())
  name         String    @unique
  url          String
  type         AssetType
  format       String
  size         Int
  user_id      String?
  user         User?     @relation(fields: [user_id], onDelete: Cascade, onUpdate: Cascade, references: [id])
  site_id      String?
  site         Site?     @relation(fields: [site_id], onDelete: Cascade, onUpdate: Cascade, references: [id])
  page_id      String?
  page         Page?     @relation(fields: [page_id], onDelete: Cascade, onUpdate: Cascade, references: [id])
  date_created DateTime  @default(now())
  date_updated DateTime  @updatedAt
}

enum PaymentPlanName {
  early
  free
  basic
  pro
}

// Payment plan of the user (subscription or one-time payment)
model PaymentPlan {
  id                String          @id @default(cuid())
  name              PaymentPlanName @unique
  price             Int?
  has_custom_domain Boolean         @default(false)
  number_of_sites   Int?
  number_of_pages   Int?
  max_upload_size   Int?
  user              User[]
  date_created      DateTime        @default(now())
  date_updated      DateTime        @updatedAt
}
